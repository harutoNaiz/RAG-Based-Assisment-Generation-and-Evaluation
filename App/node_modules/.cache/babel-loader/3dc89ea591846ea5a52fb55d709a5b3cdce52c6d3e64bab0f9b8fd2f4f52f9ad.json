{"ast":null,"code":"var _jsxFileName = \"/home/pes2ug22cs632/gen_ai/App/src/takeTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AlertCircle, ChevronRight, Clock, CheckCircle } from 'lucide-react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TakeTest = () => {\n  _s();\n  const navigate = useNavigate();\n  const chapter = localStorage.getItem('currentChapter');\n  const userEmail = localStorage.getItem('userEmail');\n\n  // State management\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [timeLeft, setTimeLeft] = useState(60 * 60); // 60 minutes in seconds\n  const [loading, setLoading] = useState(true);\n  const [showConfirmEndModal, setShowConfirmEndModal] = useState(false);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [testCompleted, setTestCompleted] = useState(false);\n  const [analytics, setAnalytics] = useState({\n    score: 0,\n    totalScore: 0,\n    wrongQuestions: [],\n    strongTopics: [],\n    weakTopics: [],\n    difficultyStats: {\n      easy: 0,\n      medium: 0,\n      hard: 0\n    },\n    totalByDifficulty: {\n      easy: 0,\n      medium: 0,\n      hard: 0\n    }\n  });\n\n  // Format time as MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Load questions from CSV\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        // http://localhost:5000/static/generated_tests/output_${chapter}.csv\n        backend / generated_tests / output_2.csv;\n        // https://github.com/harutoNaiz/genai_cs460_cs617_cs632/blob/5f74733c951c63c805acc5a07e53b2da220ebec9/backend/generated_tests/output_2.csv\n        const response = await fetch(`http://localhost:5000/static/generated_tests/output_${chapter}.csv`);\n        const csvText = await response.text();\n        Papa.parse(csvText, {\n          header: true,\n          complete: results => {\n            // Shuffle questions for random order\n            const shuffledQuestions = results.data.filter(q => q.Question && q.Question.trim() !== '') // Filter out empty questions\n            .sort(() => Math.random() - 0.5);\n            setQuestions(shuffledQuestions);\n            setUserAnswers(new Array(shuffledQuestions.length).fill(null));\n            setLoading(false);\n          },\n          error: error => {\n            console.error('Error parsing CSV:', error);\n            alert('Failed to load test questions. Please try again.');\n            navigate('/');\n          }\n        });\n      } catch (error) {\n        console.error('Error loading questions:', error);\n        alert('Failed to load test questions. Please try again.');\n        navigate('/');\n      }\n    };\n    if (chapter) {\n      loadQuestions();\n    } else {\n      alert('Missing chapter information');\n      navigate('/');\n    }\n  }, [chapter, navigate]);\n\n  // Timer logic\n  useEffect(() => {\n    if (loading || testCompleted) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          handleEndTest(true); // Auto-submit when time runs out\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [loading, testCompleted]);\n\n  // Handle answer selection\n  const handleOptionSelect = option => {\n    setSelectedOption(option);\n\n    // Update user answers array\n    const newAnswers = [...userAnswers];\n    newAnswers[currentQuestionIndex] = option;\n    setUserAnswers(newAnswers);\n  };\n\n  // Go to the next question\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n      setSelectedOption(userAnswers[currentQuestionIndex + 1] || '');\n    } else {\n      setShowConfirmEndModal(true);\n    }\n  };\n\n  // Calculate test results\n  const calculateResults = useCallback(() => {\n    const results = {\n      score: 0,\n      totalScore: 0,\n      wrongQuestions: [],\n      strongTopics: {},\n      weakTopics: {},\n      difficultyStats: {\n        easy: 0,\n        medium: 0,\n        hard: 0\n      },\n      totalByDifficulty: {\n        easy: 0,\n        medium: 0,\n        hard: 0\n      }\n    };\n    questions.forEach((question, index) => {\n      var _question$Difficulty;\n      const userAnswer = userAnswers[index];\n      const correctAnswer = question['Correct Option'];\n      const subtopic = question.Subtopic;\n      const subtopicDetail = question['Subtopic Detail'];\n      const difficulty = ((_question$Difficulty = question.Difficulty) === null || _question$Difficulty === void 0 ? void 0 : _question$Difficulty.toLowerCase()) || 'e';\n\n      // Determine points based on difficulty\n      let points = 1;\n      if (difficulty === 'm') points = 2;\n      if (difficulty === 'h') points = 3;\n\n      // Update difficulty counters\n      if (difficulty === 'e') results.totalByDifficulty.easy += 1;else if (difficulty === 'm') results.totalByDifficulty.medium += 1;else if (difficulty === 'h') results.totalByDifficulty.hard += 1;\n      results.totalScore += points;\n\n      // Check if answer is correct\n      if (userAnswer && userAnswer === correctAnswer.charAt(0)) {\n        results.score += points;\n\n        // Track difficulty stats for correct answers\n        if (difficulty === 'e') results.difficultyStats.easy += 1;else if (difficulty === 'm') results.difficultyStats.medium += 1;else if (difficulty === 'h') results.difficultyStats.hard += 1;\n\n        // Track strong topics\n        if (!results.strongTopics[subtopic]) {\n          results.strongTopics[subtopic] = [];\n        }\n        if (!results.strongTopics[subtopic].includes(subtopicDetail)) {\n          results.strongTopics[subtopic].push(subtopicDetail);\n        }\n      } else {\n        // Track wrong questions\n        results.wrongQuestions.push({\n          question: question.Question,\n          correctAnswer,\n          userAnswer: userAnswer || 'No answer',\n          subtopic,\n          subtopicDetail\n        });\n\n        // Track weak topics\n        if (!results.weakTopics[subtopic]) {\n          results.weakTopics[subtopic] = [];\n        }\n        if (!results.weakTopics[subtopic].includes(subtopicDetail)) {\n          results.weakTopics[subtopic].push(subtopicDetail);\n        }\n      }\n    });\n\n    // Convert topic objects to arrays for database storage\n    const strongTopicsArray = Object.entries(results.strongTopics).map(([topic, details]) => ({\n      topic,\n      details\n    }));\n    const weakTopicsArray = Object.entries(results.weakTopics).map(([topic, details]) => ({\n      topic,\n      details\n    }));\n    return {\n      ...results,\n      strongTopics: strongTopicsArray,\n      weakTopics: weakTopicsArray,\n      percentScore: results.score / results.totalScore * 100\n    };\n  }, [questions, userAnswers]);\n\n  // End the test and submit results\n  const handleEndTest = async (isAutoSubmit = false) => {\n    setTestCompleted(true);\n    const results = calculateResults();\n    setAnalytics(results);\n    try {\n      // Send results to backend\n      const response = await fetch('http://localhost:5000/submit_test_results', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: userEmail,\n          chapter: chapter,\n          score: results.score,\n          totalScore: results.totalScore,\n          percentScore: results.percentScore,\n          strongTopics: results.strongTopics,\n          weakTopics: results.weakTopics,\n          wrongQuestions: results.wrongQuestions,\n          difficultyStats: results.difficultyStats\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        // Store results in localStorage for analytics page\n        localStorage.setItem('testResults', JSON.stringify(results));\n\n        // Navigate to results page\n        navigate('/test-results');\n      } else {\n        console.error('Failed to submit test results:', data.message);\n        alert('Test completed, but there was an issue saving your results. ' + (isAutoSubmit ? 'Time expired. ' : '') + 'Please contact support.');\n\n        // Still navigate to results page even if there was an error\n        navigate('/test-results');\n      }\n    } catch (error) {\n      console.error('Error submitting test results:', error);\n      alert('Test completed, but there was an issue saving your results. ' + (isAutoSubmit ? 'Time expired. ' : '') + 'Please contact support.');\n\n      // Still navigate to results even if there was an error\n      navigate('/test-results');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-white text-xl\",\n        children: \"Loading test questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  const options = ['A', 'B', 'C', 'D'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto bg-white bg-opacity-20 rounded-lg p-4 mb-4 flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(Clock, {\n          className: \"h-5 w-5 mr-2 text-white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white font-bold\",\n          children: formatTime(timeLeft)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-white\",\n        children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-6 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-bold mb-6\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.Question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-4\",\n        children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `w-full text-left p-4 rounded-lg border transition-colors ${selectedOption === option ? 'bg-blue-100 border-blue-500' : 'bg-white border-gray-300 hover:bg-gray-50'}`,\n          onClick: () => handleOptionSelect(option),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-medium mr-2\",\n            children: [option, \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion[`Option ${option}`]]\n        }, option, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto flex justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg flex items-center\",\n        onClick: handleNextQuestion,\n        children: currentQuestionIndex < questions.length - 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Next \", /*#__PURE__*/_jsxDEV(ChevronRight, {\n            className: \"ml-1 h-5 w-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true) : 'Finish Test'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), showConfirmEndModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg p-6 max-w-md w-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold mb-4 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n            className: \"h-6 w-6 text-yellow-500 mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this), \"End Test Confirmation\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-6\",\n          children: [\"Are you sure you want to end the test? You have answered \", userAnswers.filter(a => a !== null).length, \" out of \", questions.length, \" questions.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-end space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\",\n            onClick: () => setShowConfirmEndModal(false),\n            children: \"Continue Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\",\n            onClick: () => {\n              setShowConfirmEndModal(false);\n              handleEndTest();\n            },\n            children: \"End Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n};\n_s(TakeTest, \"wNeZjYFcoJ0U2jbwZNb+uCsuhX8=\", false, function () {\n  return [useNavigate];\n});\n_c = TakeTest;\nexport default TakeTest;\nvar _c;\n$RefreshReg$(_c, \"TakeTest\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","AlertCircle","ChevronRight","Clock","CheckCircle","Papa","jsxDEV","_jsxDEV","Fragment","_Fragment","TakeTest","_s","navigate","chapter","localStorage","getItem","userEmail","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedOption","setSelectedOption","timeLeft","setTimeLeft","loading","setLoading","showConfirmEndModal","setShowConfirmEndModal","userAnswers","setUserAnswers","testCompleted","setTestCompleted","analytics","setAnalytics","score","totalScore","wrongQuestions","strongTopics","weakTopics","difficultyStats","easy","medium","hard","totalByDifficulty","formatTime","seconds","mins","Math","floor","secs","toString","padStart","loadQuestions","backend","generated_tests","output_2","csv","response","fetch","csvText","text","parse","header","complete","results","shuffledQuestions","data","filter","q","Question","trim","sort","random","Array","length","fill","error","console","alert","timer","setInterval","prev","clearInterval","handleEndTest","handleOptionSelect","option","newAnswers","handleNextQuestion","prevIndex","calculateResults","forEach","question","index","_question$Difficulty","userAnswer","correctAnswer","subtopic","Subtopic","subtopicDetail","difficulty","Difficulty","toLowerCase","points","charAt","includes","push","strongTopicsArray","Object","entries","map","topic","details","weakTopicsArray","percentScore","isAutoSubmit","method","headers","body","JSON","stringify","email","json","success","setItem","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","options","onClick","a","_c","$RefreshReg$"],"sources":["/home/pes2ug22cs632/gen_ai/App/src/takeTest.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AlertCircle, ChevronRight, Clock, CheckCircle } from 'lucide-react';\nimport Papa from 'papaparse';\n\nconst TakeTest = () => {\n  const navigate = useNavigate();\n  const chapter = localStorage.getItem('currentChapter');\n  const userEmail = localStorage.getItem('userEmail');\n\n  // State management\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [timeLeft, setTimeLeft] = useState(60 * 60); // 60 minutes in seconds\n  const [loading, setLoading] = useState(true);\n  const [showConfirmEndModal, setShowConfirmEndModal] = useState(false);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [testCompleted, setTestCompleted] = useState(false);\n  const [analytics, setAnalytics] = useState({\n    score: 0,\n    totalScore: 0,\n    wrongQuestions: [],\n    strongTopics: [],\n    weakTopics: [],\n    difficultyStats: { easy: 0, medium: 0, hard: 0 },\n    totalByDifficulty: { easy: 0, medium: 0, hard: 0 }\n  });\n\n  // Format time as MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Load questions from CSV\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        // http://localhost:5000/static/generated_tests/output_${chapter}.csv\n        backend/generated_tests/output_2.csv\n        // https://github.com/harutoNaiz/genai_cs460_cs617_cs632/blob/5f74733c951c63c805acc5a07e53b2da220ebec9/backend/generated_tests/output_2.csv\n        const response = await fetch(`http://localhost:5000/static/generated_tests/output_${chapter}.csv`);\n        const csvText = await response.text();\n        \n        Papa.parse(csvText, {\n          header: true,\n          complete: (results) => {\n            // Shuffle questions for random order\n            const shuffledQuestions = results.data\n              .filter(q => q.Question && q.Question.trim() !== '') // Filter out empty questions\n              .sort(() => Math.random() - 0.5);\n            \n            setQuestions(shuffledQuestions);\n            setUserAnswers(new Array(shuffledQuestions.length).fill(null));\n            setLoading(false);\n          },\n          error: (error) => {\n            console.error('Error parsing CSV:', error);\n            alert('Failed to load test questions. Please try again.');\n            navigate('/');\n          }\n        });\n      } catch (error) {\n        console.error('Error loading questions:', error);\n        alert('Failed to load test questions. Please try again.');\n        navigate('/');\n      }\n    };\n\n    if (chapter) {\n      loadQuestions();\n    } else {\n      alert('Missing chapter information');\n      navigate('/');\n    }\n  }, [chapter, navigate]);\n\n  // Timer logic\n  useEffect(() => {\n    if (loading || testCompleted) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          handleEndTest(true); // Auto-submit when time runs out\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [loading, testCompleted]);\n\n  // Handle answer selection\n  const handleOptionSelect = (option) => {\n    setSelectedOption(option);\n    \n    // Update user answers array\n    const newAnswers = [...userAnswers];\n    newAnswers[currentQuestionIndex] = option;\n    setUserAnswers(newAnswers);\n  };\n\n  // Go to the next question\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n      setSelectedOption(userAnswers[currentQuestionIndex + 1] || '');\n    } else {\n      setShowConfirmEndModal(true);\n    }\n  };\n\n  // Calculate test results\n  const calculateResults = useCallback(() => {\n    const results = {\n      score: 0,\n      totalScore: 0,\n      wrongQuestions: [],\n      strongTopics: {},\n      weakTopics: {},\n      difficultyStats: { easy: 0, medium: 0, hard: 0 },\n      totalByDifficulty: { easy: 0, medium: 0, hard: 0 }\n    };\n\n    questions.forEach((question, index) => {\n      const userAnswer = userAnswers[index];\n      const correctAnswer = question['Correct Option'];\n      const subtopic = question.Subtopic;\n      const subtopicDetail = question['Subtopic Detail'];\n      const difficulty = question.Difficulty?.toLowerCase() || 'e';\n      \n      // Determine points based on difficulty\n      let points = 1;\n      if (difficulty === 'm') points = 2;\n      if (difficulty === 'h') points = 3;\n      \n      // Update difficulty counters\n      if (difficulty === 'e') results.totalByDifficulty.easy += 1;\n      else if (difficulty === 'm') results.totalByDifficulty.medium += 1;\n      else if (difficulty === 'h') results.totalByDifficulty.hard += 1;\n      \n      results.totalScore += points;\n      \n      // Check if answer is correct\n      if (userAnswer && userAnswer === correctAnswer.charAt(0)) {\n        results.score += points;\n        \n        // Track difficulty stats for correct answers\n        if (difficulty === 'e') results.difficultyStats.easy += 1;\n        else if (difficulty === 'm') results.difficultyStats.medium += 1;\n        else if (difficulty === 'h') results.difficultyStats.hard += 1;\n        \n        // Track strong topics\n        if (!results.strongTopics[subtopic]) {\n          results.strongTopics[subtopic] = [];\n        }\n        if (!results.strongTopics[subtopic].includes(subtopicDetail)) {\n          results.strongTopics[subtopic].push(subtopicDetail);\n        }\n      } else {\n        // Track wrong questions\n        results.wrongQuestions.push({\n          question: question.Question,\n          correctAnswer,\n          userAnswer: userAnswer || 'No answer',\n          subtopic,\n          subtopicDetail\n        });\n        \n        // Track weak topics\n        if (!results.weakTopics[subtopic]) {\n          results.weakTopics[subtopic] = [];\n        }\n        if (!results.weakTopics[subtopic].includes(subtopicDetail)) {\n          results.weakTopics[subtopic].push(subtopicDetail);\n        }\n      }\n    });\n    \n    // Convert topic objects to arrays for database storage\n    const strongTopicsArray = Object.entries(results.strongTopics).map(([topic, details]) => ({\n      topic,\n      details\n    }));\n    \n    const weakTopicsArray = Object.entries(results.weakTopics).map(([topic, details]) => ({\n      topic,\n      details\n    }));\n    \n    return {\n      ...results,\n      strongTopics: strongTopicsArray,\n      weakTopics: weakTopicsArray,\n      percentScore: (results.score / results.totalScore) * 100\n    };\n  }, [questions, userAnswers]);\n\n  // End the test and submit results\n  const handleEndTest = async (isAutoSubmit = false) => {\n    setTestCompleted(true);\n    const results = calculateResults();\n    setAnalytics(results);\n    \n    try {\n      // Send results to backend\n      const response = await fetch('http://localhost:5000/submit_test_results', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: userEmail,\n          chapter: chapter,\n          score: results.score,\n          totalScore: results.totalScore,\n          percentScore: results.percentScore,\n          strongTopics: results.strongTopics,\n          weakTopics: results.weakTopics,\n          wrongQuestions: results.wrongQuestions,\n          difficultyStats: results.difficultyStats\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        // Store results in localStorage for analytics page\n        localStorage.setItem('testResults', JSON.stringify(results));\n        \n        // Navigate to results page\n        navigate('/test-results');\n      } else {\n        console.error('Failed to submit test results:', data.message);\n        alert('Test completed, but there was an issue saving your results. ' + \n              (isAutoSubmit ? 'Time expired. ' : '') +\n              'Please contact support.');\n        \n        // Still navigate to results page even if there was an error\n        navigate('/test-results');\n      }\n    } catch (error) {\n      console.error('Error submitting test results:', error);\n      alert('Test completed, but there was an issue saving your results. ' + \n            (isAutoSubmit ? 'Time expired. ' : '') +\n            'Please contact support.');\n      \n      // Still navigate to results even if there was an error\n      navigate('/test-results');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600\">\n        <div className=\"text-white text-xl\">Loading test questions...</div>\n      </div>\n    );\n  }\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const options = ['A', 'B', 'C', 'D'];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 p-4\">\n      {/* Timer and Progress Bar */}\n      <div className=\"max-w-3xl mx-auto bg-white bg-opacity-20 rounded-lg p-4 mb-4 flex justify-between items-center\">\n        <div className=\"flex items-center\">\n          <Clock className=\"h-5 w-5 mr-2 text-white\" />\n          <span className=\"text-white font-bold\">{formatTime(timeLeft)}</span>\n        </div>\n        <div className=\"text-white\">\n          Question {currentQuestionIndex + 1} of {questions.length}\n        </div>\n      </div>\n      \n      {/* Question Card */}\n      <div className=\"max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-6 mb-6\">\n        <h3 className=\"text-xl font-bold mb-6\">{currentQuestion?.Question}</h3>\n        \n        <div className=\"space-y-4\">\n          {options.map((option, index) => (\n            <button\n              key={option}\n              className={`w-full text-left p-4 rounded-lg border transition-colors ${\n                selectedOption === option\n                  ? 'bg-blue-100 border-blue-500'\n                  : 'bg-white border-gray-300 hover:bg-gray-50'\n              }`}\n              onClick={() => handleOptionSelect(option)}\n            >\n              <span className=\"font-medium mr-2\">{option}.</span>\n              {currentQuestion?.[`Option ${option}`]}\n            </button>\n          ))}\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <div className=\"max-w-3xl mx-auto flex justify-between\">\n        <div></div> {/* Empty div for spacing */}\n        <button\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg flex items-center\"\n          onClick={handleNextQuestion}\n        >\n          {currentQuestionIndex < questions.length - 1 ? (\n            <>\n              Next <ChevronRight className=\"ml-1 h-5 w-5\" />\n            </>\n          ) : (\n            'Finish Test'\n          )}\n        </button>\n      </div>\n      \n      {/* Confirmation Modal */}\n      {showConfirmEndModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-md w-full\">\n            <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n              <AlertCircle className=\"h-6 w-6 text-yellow-500 mr-2\" />\n              End Test Confirmation\n            </h3>\n            <p className=\"mb-6\">\n              Are you sure you want to end the test? You have answered {userAnswers.filter(a => a !== null).length} out of {questions.length} questions.\n            </p>\n            <div className=\"flex justify-end space-x-4\">\n              <button\n                className=\"px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\"\n                onClick={() => setShowConfirmEndModal(false)}\n              >\n                Continue Test\n              </button>\n              <button\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n                onClick={() => {\n                  setShowConfirmEndModal(false);\n                  handleEndTest();\n                }}\n              >\n                End Test\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TakeTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}